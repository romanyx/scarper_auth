// Code generated by go-bindata.
// sources:
// templates/change.txt
// templates/verify.txt
// DO NOT EDIT!

package sendgrid

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _changeTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcf\xb1\x6e\xeb\x30\x0c\x85\xe1\x9d\x4f\x71\x1e\x20\x88\xf7\x4c\x77\xbc\x5d\xda\x21\x5e\x3a\x15\x8c\x44\x47\x84\x65\x51\x95\xe4\x1a\x46\x90\x77\x2f\x0c\xc3\xe9\x2a\xe0\x3f\xfa\xf8\x5f\x62\xb4\x13\xd1\xa7\xcd\x70\x9c\xe0\x02\xa7\xbb\x60\xb5\xb9\x20\x73\xad\x8b\x15\x8f\xdb\x0a\x17\xd5\x8d\x9a\xee\xb0\x84\x16\x04\x83\xc5\x68\xcb\xf6\x10\x35\x8d\x17\xa2\xd0\x5a\xae\x97\xae\xab\xae\x70\x96\x72\x56\xeb\x8e\xfe\x6b\x1f\xed\x1e\x8f\x73\x6f\xa3\xa4\xe7\x93\xe8\x6d\xd8\xfe\x80\x57\x8f\xf7\x8f\x1e\x13\x8f\x02\xc6\x75\x8f\x0f\xc5\x0b\x50\xe4\x7b\x96\xda\xb0\x68\x0b\x68\x41\x2b\x64\x62\x8d\x60\xef\x8b\xd4\x7a\x82\x37\x24\x6b\xbb\xf2\x20\x6e\x30\xf0\xcd\x7e\x04\x9c\x3c\x72\x14\xae\x1b\xbc\x2c\x5c\xfc\xbe\x92\xac\xe9\xa0\x8e\x9b\x6e\x8d\xa1\xce\x39\x5b\x69\xff\xfe\x8e\x38\x13\x5d\x35\x39\x29\x12\xd7\x13\x51\x1f\xe4\x85\xec\x85\x27\xa2\xdf\x00\x00\x00\xff\xff\xd3\x87\xa2\x0f\x41\x01\x00\x00")

func changeTxtBytes() ([]byte, error) {
	return bindataRead(
		_changeTxt,
		"change.txt",
	)
}

func changeTxt() (*asset, error) {
	bytes, err := changeTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "change.txt", size: 321, mode: os.FileMode(420), modTime: time.Unix(1545145131, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _verifyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\xc1\x6e\x83\x40\x0c\x04\xd0\xbb\xbf\x62\x3e\x20\x0a\xf7\x9c\x7a\x6c\x2f\x6d\xa5\x70\xaf\x36\xac\x09\x16\xcb\x9a\x7a\x4d\x10\x8a\xf2\xef\x15\xa0\xa6\xea\xd5\xd2\x8c\xdf\xbc\x72\x4a\x7a\x20\xfa\x4c\x1c\x0a\xe3\xc6\x26\xed\x82\x45\x27\x03\x0f\x41\x12\x42\x8c\xc6\xa5\xe0\xb2\xa0\x49\xd2\xf4\x92\xaf\xd0\x0c\xef\x18\xad\xa6\xa4\xf3\x7a\x48\x92\xfb\x13\x51\xe7\x3e\x96\x53\x55\x95\xc6\xc2\xc8\x76\x14\xad\xb6\x92\xaf\xad\x56\x9a\xe0\xa2\xb9\xba\xdf\x8f\xb5\xf6\x9c\x1f\x0f\xa2\xb7\x76\xfd\x85\x28\x11\xef\x1f\x35\x86\xd0\x33\x02\xce\x7b\x1e\xc6\x57\x29\x6e\x5b\x0c\xc6\xdf\x13\x17\xc7\x2c\xde\xc1\x3b\x29\xff\x81\x07\x44\x45\x56\xdf\x95\xbf\xc4\x15\x86\x70\xd1\x1b\x23\xe4\x88\x71\x5f\xd9\xaa\xcd\xc1\xe2\xde\x92\xd5\x9f\x36\xb8\xa2\x4c\xe3\xa8\xe6\x2f\x7f\x23\x8e\x44\x67\xc9\x0d\x1b\xa7\xe5\x40\x54\x77\xfc\x14\xd6\x1c\x06\xa2\x9f\x00\x00\x00\xff\xff\xc7\x61\x60\x0c\x45\x01\x00\x00")

func verifyTxtBytes() ([]byte, error) {
	return bindataRead(
		_verifyTxt,
		"verify.txt",
	)
}

func verifyTxt() (*asset, error) {
	bytes, err := verifyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "verify.txt", size: 325, mode: os.FileMode(420), modTime: time.Unix(1545145051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"change.txt": changeTxt,
	"verify.txt": verifyTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"change.txt": &bintree{changeTxt, map[string]*bintree{}},
	"verify.txt": &bintree{verifyTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
