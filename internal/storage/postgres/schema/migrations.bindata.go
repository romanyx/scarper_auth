// Code generated by go-bindata.
// sources:
// migrations/1543497171_init.down.sql
// migrations/1543497171_init.up.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1543497171_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4a\x2d\x4e\x2d\x29\xb6\xe6\xc2\x2a\x59\x5a\x9c\x5a\x04\x97\x8b\x0c\x40\x97\x8a\x2f\x2e\x49\x2c\x29\x2d\xb6\x56\xe0\x02\x04\x00\x00\xff\xff\x43\x7b\xc7\xbb\x5b\x00\x00\x00")

func _1543497171_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1543497171_initDownSql,
		"1543497171_init.down.sql",
	)
}

func _1543497171_initDownSql() (*asset, error) {
	bytes, err := _1543497171_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1543497171_init.down.sql", size: 91, mode: os.FileMode(420), modTime: time.Unix(1544874101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1543497171_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8f\xd3\x30\x14\xc4\xcf\xcf\x9f\xe2\xdd\xda\x54\x91\x8a\x40\xc0\xa1\x27\xd3\xbe\x82\x45\xea\x16\xc7\x59\xb6\xa7\xc8\xd4\x86\xb5\xe8\x3f\xc5\x8e\xd8\x8f\x8f\x48\x36\x21\x65\x8b\x56\x82\xbd\x26\x33\xa3\xe7\xf9\xcd\x42\xad\x37\xa8\xb7\x1b\x42\xb1\x44\xba\x15\xb9\xce\xb1\x0e\xae\x2a\x43\x34\xb1\x0e\x33\x36\x57\xc4\x35\xb5\x92\xc1\x0f\xe4\x39\x92\x2c\x56\x38\x1e\x49\xfa\x3c\x4a\x71\x74\x43\x4a\x2c\x05\x2d\x46\xc9\x8c\xf5\x2e\xfe\x2e\x6b\x92\xe5\x5a\x0f\xd3\x03\x8e\x19\x78\x8b\x00\x39\x29\xc1\x33\xdc\x28\xb1\xe2\x6a\x8b\x1f\x69\x9b\x32\x30\xbb\xdd\xa9\x3e\xc6\xd2\x5b\x98\x7f\xe0\x0a\xc7\xaf\xde\x24\x58\x48\xf1\xa9\xa0\x26\x49\x16\x59\x96\xe2\x74\x82\xdf\xf6\xa7\x2f\x66\x8f\xde\xba\x63\xf4\x5f\xbd\xab\x70\x32\x65\x0c\xdc\xc1\xf8\x3d\x02\xc0\x0d\x57\x6d\xc0\xeb\x17\xc9\x6f\x27\x83\xb3\x09\xe1\xc7\xa9\xb2\xe5\x9d\x09\x77\x38\xd0\xbd\x7d\x79\xa1\x7b\x78\x2b\x00\x0c\x9f\x3e\x10\xc4\xd3\x77\x77\x04\xc0\x47\x77\xa6\xc8\x18\x4c\x27\x18\xfd\xc1\x85\x68\x0e\xe7\xf0\xeb\x34\xd8\x55\xce\x44\x67\x4b\x13\x01\x40\x8b\x15\xe5\x9a\xaf\x36\x7d\x22\x2e\x68\xc9\x8b\x4c\xe3\xbc\x50\x8a\xa4\x2e\x7b\x49\xca\xa0\x3e\xdb\x7f\xf3\xb2\x01\x11\x21\x17\x74\x7b\x8d\x48\xd9\x94\x56\x7a\x7b\x8f\x6b\xd9\x41\x6a\xbe\x25\xb3\xa7\xcd\x4d\x0f\x7f\x98\x9b\x6f\x4f\x8c\xa1\x72\xc1\xc5\x87\x35\x5c\xdd\x42\x57\x71\x4f\xe8\xda\x14\x18\x6b\xf9\x78\x0b\x42\x6a\x7a\x4f\x0a\x15\x2d\x49\x91\x9c\x53\x3f\x38\x6f\x93\xbf\x40\x69\x8f\x77\xf7\x67\x5f\xb5\xf5\x3e\x2e\x37\xbd\x44\xf7\x1f\xe4\x9e\x13\x5c\xdb\xde\x65\xf9\x5d\xa3\x5d\xfb\x3f\x03\x00\x00\xff\xff\x24\x90\x87\x4e\xe1\x03\x00\x00")

func _1543497171_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1543497171_initUpSql,
		"1543497171_init.up.sql",
	)
}

func _1543497171_initUpSql() (*asset, error) {
	bytes, err := _1543497171_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1543497171_init.up.sql", size: 993, mode: os.FileMode(420), modTime: time.Unix(1545057937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1543497171_init.down.sql": _1543497171_initDownSql,
	"1543497171_init.up.sql": _1543497171_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1543497171_init.down.sql": &bintree{_1543497171_initDownSql, map[string]*bintree{}},
	"1543497171_init.up.sql": &bintree{_1543497171_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

