// Code generated by go-bindata.
// sources:
// migrations/1543497171_init.down.sql
// migrations/1543497171_init.up.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1543497171_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4a\x2d\x4e\x2d\x29\xb6\xe6\xc2\x2a\x59\x5a\x9c\x5a\x04\x97\x8b\x0c\x40\x97\x8a\x2f\x2e\x49\x2c\x29\x2d\xb6\x56\xe0\x02\x04\x00\x00\xff\xff\x43\x7b\xc7\xbb\x5b\x00\x00\x00")

func _1543497171_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1543497171_initDownSql,
		"1543497171_init.down.sql",
	)
}

func _1543497171_initDownSql() (*asset, error) {
	bytes, err := _1543497171_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1543497171_init.down.sql", size: 91, mode: os.FileMode(420), modTime: time.Unix(1544874101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1543497171_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x8f\xd3\x30\x14\xc4\xcf\xcf\x9f\xe2\xdd\xda\x54\x91\x8a\x40\xc0\xa1\x27\xd3\xbe\x82\x45\xea\x16\xc7\x59\xb6\xa7\xc8\xd4\x86\xb5\xe8\x3f\xc5\xae\xd8\x8f\x8f\x48\x9a\x90\xb2\x45\x95\x60\xaf\xf6\xcc\xc8\x9e\xdf\xcc\xd4\x72\x85\x7a\xbd\x22\x14\x73\xa4\x7b\x91\xeb\x1c\x4f\xc1\x55\x65\x88\x26\x9e\xc2\x84\x4d\x15\x71\x4d\x8d\xa4\x77\x81\x3c\x47\x92\xc5\x02\x87\x03\x49\x9f\x07\x29\x0e\xee\x48\x89\xb9\xa0\xd9\x20\x99\xb0\xce\xc5\xdf\x65\x75\xb2\x5c\xea\x7e\x7a\xc0\x21\x03\x6f\x11\x20\x27\x25\x78\x86\x2b\x25\x16\x5c\xad\xf1\x23\xad\x53\x06\x66\xb3\x39\x9c\xf6\xb1\xf4\x16\xa6\x1f\xb8\xc2\xe1\xab\x37\x09\x16\x52\x7c\x2a\xa8\x4e\x92\x45\x96\xa5\x38\x1e\xe1\xb7\xed\xe1\x8b\xd9\xa2\xb7\x6e\x1f\xfd\x57\xef\x2a\x1c\x8d\x19\x03\xb7\x33\x7e\x8b\x00\x70\xc7\x55\x13\xf0\xfa\x45\xf2\xdb\xc9\xe0\x68\x42\xf8\x71\xa8\x6c\xf9\x60\xc2\x03\xf6\x74\x6f\x5f\x5e\xe8\xce\x7f\x05\x80\xfe\xd7\x7b\x82\x78\xf8\xee\xf6\x00\xf8\xe4\x9d\x29\x32\x06\xe3\x11\x46\xbf\x73\x21\x9a\xdd\x31\xfc\x7a\x1a\x6c\x2a\x67\xa2\xb3\xa5\x89\x00\xa0\xc5\x82\x72\xcd\x17\xab\x2e\x11\x67\x34\xe7\x45\xa6\x71\x5a\x28\x45\x52\x97\x9d\x24\x65\x70\x3a\xda\x7f\xf3\xb2\x1e\x11\x21\x67\x74\x7f\x8d\x48\x59\x97\x56\x7a\xfb\x88\x4b\xd9\x42\xaa\xcf\x92\xc9\x6d\x73\xdd\xc3\x1f\xe6\xfa\xec\xc6\x18\x2a\x17\x5c\x3c\xaf\xe1\xea\x16\xda\x8a\x3b\x42\xd7\xa6\xc0\x58\xc3\xc7\x5b\x10\x52\xd3\x7b\x52\xa8\x68\x4e\x8a\xe4\x94\xba\xc1\x79\x9b\xfc\x05\x8a\x7b\x3c\xfa\xea\x5c\xec\xd3\x5e\xd3\x4b\x6a\xff\x01\xed\x39\x99\x35\xc5\x5d\xf6\xde\x96\xd9\x16\xff\x33\x00\x00\xff\xff\xe1\x28\xdf\x12\xdc\x03\x00\x00")

func _1543497171_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1543497171_initUpSql,
		"1543497171_init.up.sql",
	)
}

func _1543497171_initUpSql() (*asset, error) {
	bytes, err := _1543497171_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1543497171_init.up.sql", size: 988, mode: os.FileMode(420), modTime: time.Unix(1545065449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1543497171_init.down.sql": _1543497171_initDownSql,
	"1543497171_init.up.sql": _1543497171_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1543497171_init.down.sql": &bintree{_1543497171_initDownSql, map[string]*bintree{}},
	"1543497171_init.up.sql": &bintree{_1543497171_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

