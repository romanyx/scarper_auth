// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package reset

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	user "github.com/romanyx/scraper_auth/internal/user"
	time "time"
)

// Mock of Informer interface
type MockInformer struct {
	ctrl     *gomock.Controller
	recorder *_MockInformerRecorder
}

// Recorder for MockInformer (not exported)
type _MockInformerRecorder struct {
	mock *MockInformer
}

func NewMockInformer(ctrl *gomock.Controller) *MockInformer {
	mock := &MockInformer{ctrl: ctrl}
	mock.recorder = &_MockInformerRecorder{mock}
	return mock
}

func (_m *MockInformer) EXPECT() *_MockInformerRecorder {
	return _m.recorder
}

func (_m *MockInformer) Change(ctx context.Context, u *user.User, token string) error {
	ret := _m.ctrl.Call(_m, "Change", ctx, u, token)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInformerRecorder) Change(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Change", arg0, arg1, arg2)
}

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) FindByEmail(ctx context.Context, email string, u *user.User) error {
	ret := _m.ctrl.Call(_m, "FindByEmail", ctx, email, u)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) FindByEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByEmail", arg0, arg1, arg2)
}

func (_m *MockRepository) Reset(ctx context.Context, userID int32, token string, exp time.Time) (func() error, func() error, error) {
	ret := _m.ctrl.Call(_m, "Reset", ctx, userID, token, exp)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoryRecorder) Reset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1, arg2, arg3)
}
