// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package reg

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	user "github.com/romanyx/scraper_auth/internal/user"
)

// Mock of Validater interface
type MockValidater struct {
	ctrl     *gomock.Controller
	recorder *_MockValidaterRecorder
}

// Recorder for MockValidater (not exported)
type _MockValidaterRecorder struct {
	mock *MockValidater
}

func NewMockValidater(ctrl *gomock.Controller) *MockValidater {
	mock := &MockValidater{ctrl: ctrl}
	mock.recorder = &_MockValidaterRecorder{mock}
	return mock
}

func (_m *MockValidater) EXPECT() *_MockValidaterRecorder {
	return _m.recorder
}

func (_m *MockValidater) Validate(ctx context.Context, f *Form) error {
	ret := _m.ctrl.Call(_m, "Validate", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockValidaterRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate", arg0, arg1)
}

// Mock of Informer interface
type MockInformer struct {
	ctrl     *gomock.Controller
	recorder *_MockInformerRecorder
}

// Recorder for MockInformer (not exported)
type _MockInformerRecorder struct {
	mock *MockInformer
}

func NewMockInformer(ctrl *gomock.Controller) *MockInformer {
	mock := &MockInformer{ctrl: ctrl}
	mock.recorder = &_MockInformerRecorder{mock}
	return mock
}

func (_m *MockInformer) EXPECT() *_MockInformerRecorder {
	return _m.recorder
}

func (_m *MockInformer) Verify(ctx context.Context, u *user.User) error {
	ret := _m.ctrl.Call(_m, "Verify", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInformerRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Verify", arg0, arg1)
}

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) Create(ctx context.Context, u *user.NewUser, usr *user.User) (func() error, func() error, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, u, usr)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoryRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0, arg1, arg2)
}

func (_m *MockRepository) FindByAccountID(ctx context.Context, accountID string, u *user.User) error {
	ret := _m.ctrl.Call(_m, "FindByAccountID", ctx, accountID, u)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) FindByAccountID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByAccountID", arg0, arg1, arg2)
}

func (_m *MockRepository) Unique(ctx context.Context, email string) error {
	ret := _m.ctrl.Call(_m, "Unique", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Unique(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unique", arg0, arg1)
}
